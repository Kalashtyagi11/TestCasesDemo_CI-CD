<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var controllers = new[]
    {
        new { Name = "User", BaseType = "BaseEntity", Operations = new[] { "Get", "GetAll", "Create", "Update", "Delete" } },
        new { Name = "Role", BaseType = "BaseEntity", Operations = new[] { "Get", "GetAll", "Create", "Update", "Delete" } },
        new { Name = "Permission", BaseType = "BaseEntity", Operations = new[] { "Get", "GetAll", "Create", "Update", "Delete" } }
    };
#>
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using SocialSecurity.Shared.Dtos;
using SocialSecurity.Application.Interfaces;

namespace SocialSecurity.WebApi.Controllers
{
<# foreach(var controller in controllers) { #>
    [ApiController]
    [Route("api/[controller]")]
    public class <#= controller.Name #>Controller : ControllerBase
    {
        private readonly I<#= controller.Name #>Service _service;

        public <#= controller.Name #>Controller(I<#= controller.Name #>Service service)
        {
            _service = service;
        }

<# foreach(var operation in controller.Operations) { #>
<# if(operation == "Get") { #>
        [HttpGet("{id}")]
        public async Task<ActionResult<<#= controller.Name #>Dto>> Get<#= controller.Name #>(Guid id)
        {
            var result = await _service.GetByIdAsync(id);
            if (result == null)
                return NotFound();
            return Ok(result);
        }
<# } else if(operation == "GetAll") { #>
        [HttpGet]
        public async Task<ActionResult<List<<#= controller.Name #>Dto>>> GetAll<#= controller.Name #>s()
        {
            var result = await _service.GetAllAsync();
            return Ok(result);
        }
<# } else if(operation == "Create") { #>
        [HttpPost]
        public async Task<ActionResult<<#= controller.Name #>Dto>> Create<#= controller.Name #>([FromBody] <#= controller.Name #>Dto dto)
        {
            var result = await _service.CreateAsync(dto);
            return CreatedAtAction(nameof(Get<#= controller.Name #>), new { id = result.Id }, result);
        }
<# } else if(operation == "Update") { #>
        [HttpPut("{id}")]
        public async Task<IActionResult> Update<#= controller.Name #>(Guid id, [FromBody] <#= controller.Name #>Dto dto)
        {
            if (id != dto.Id)
                return BadRequest();
            
            await _service.UpdateAsync(dto);
            return NoContent();
        }
<# } else if(operation == "Delete") { #>
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete<#= controller.Name #>(Guid id)
        {
            await _service.DeleteAsync(id);
            return NoContent();
        }
<# } #>
<# } #>
    }

<# } #>
} 